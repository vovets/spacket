#!/bin/sh -e

tmp_dir=$(mktemp -d jlink_connect.XXXX)
jlink_pid=$tmp_dir/jlink_pid
jlink_log=$tmp_dir/jlink_log
jlink_out=$tmp_dir/jlink_out
jlink_commands=$tmp_dir/jlink_commands

do_cleanup() {
    (
        flock -n 9 || exit 0
        [ -d $tmp_dir ] || exit 0
        echo $1 trap:
        [ -e $jlink_pid ] && { pid=$(cat $jlink_pid) && echo killing jlink $pid && kill $pid ; }
        # without this delay sometimes jlink process is still there (after receiving TERM sig)
        # when the next test starts
        # that causes 'Register failed. Emulator has reached maximum number of connections.' error
        sleep 0.5
        rm -r $tmp_dir
    ) 9<"$0"
}

handler() {
    do_cleanup $1
}

run_test() {
    echo "Running test..."
    code=0
    PYTHONPATH=${SPACKET_ROOT}/tests/python:$PYTHONPATH ${host_test_executable} || code=$?
    if [ $code -ne 0 ] ; then
        if [ $code -eq 2 ] ; then
            echo "Test asked to keep jlink running, waiting for INT"
            while true; do
                sleep 1
            done
        fi
    fi
    return $code
}

for reason in INT TERM EXIT; do
    trap "handler $reason" $reason
done

# For whatever reason jlinkexe V648a may exit after processing sript.
# V614b does not exit. Good hour of sleep may solve the problem.
cat >$jlink_commands <<EOF
r
g
sleep 3600000
EOF

echo "Flashing fw..."
${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target ${fw_project}-flash

echo "Starting RTT server..."
${JLINK_EXE} ${JLINK_CONNECT_OPTIONS_STR} -log $jlink_log -commandfile $jlink_commands >$jlink_out & echo -n $! >$jlink_pid

echo -n "Waiting for RTT server to connect to target..."
for attempt in $(seq 20) last; do
    sleep 0.1
    kill -0 $(cat $jlink_pid) 2>/dev/null || (echo -n p && continue)
    [ -r $jlink_out ] || (echo -n f && continue)
    egrep -q -e "Sleep\([[:digit:]]+\)" $jlink_out && break
    echo -n s
done
echo

[ $attempt != last ] && echo "Connected to target"
[ $attempt = last ] && echo "Failed to connect to target" && false

run_test
